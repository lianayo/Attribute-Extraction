package dm;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import com.jramoyo.io.BufferedRandomAccessFile;

public class Files {
public static void WriteLine(String path,String out){
		File file = new File(path);
		File parentDir = file.getParentFile();
		if(! parentDir.exists()) 
			parentDir.mkdirs();
		BufferedWriter output=null;
 	
   		try {output = new BufferedWriter(new FileWriter(file,true));
   			output.write(out+"\n");
   			output.close();
   		}catch (Exception e) {e.printStackTrace();}
	}
public static void WriteAll(String path,ArrayList<String[]> data){
	String out="";
	BufferedRandomAccessFile File=null;
	try {
		File = new BufferedRandomAccessFile(path, "rw");
		for (String[] row:data)
			File.writeBytes(Files.RowToString(row)+"\n");
		File.close();
	}catch (IOException e1) {
		e1.printStackTrace();}
}
public static FileData Open(String path,String delimiter,boolean headers) throws IOException{
		FileData filedata = new FileData().SetPath(path).SetDelimiter(delimiter);
		 if (delimiter!= null && !delimiter.equals("")){
		 }else{
			 delimiter="\t";
			 }
		 BufferedRandomAccessFile File=null;
         try {
        	 File = new BufferedRandomAccessFile(path, "r");
         }catch (FileNotFoundException e2) {
              	e2.printStackTrace();
         }
         while (File.length()!=File.getFilePointer()){
              if (headers && File.getFilePointer()==0)
            	  filedata.SetHeaders(File.getNextLine().split("\t"));
              else
            	  filedata.AddRow(File.getNextLine().split("\t"));
              }try{
                	File.close();
              } catch (IOException e) {   
                     e.printStackTrace();
              }      
        filedata.SetDelimiter(delimiter);
        filedata.SetPath(path);
//        System.out.println("Done");
        return filedata;
}
public static void print(FileData filedata){
	int i=0;
	System.out.println("Index\t"+Files.RowToString(filedata.GetHeaders()));
	for (String[] row:filedata.Data){
		System.out.print(i);
		i++;
		for (String Field:row){
			System.out.print("\t"+Field);
			}
		System.out.print("\n");
	}
}
public static String AddToFileName(String FileName,String Conc){
	return FileName.split("\\.")[0]+Conc+"."+FileName.split("\\.")[1];
}
protected static String RowToString(String[] Row){
	String out="";
	try{
	for (String Field:Row){
		if (out!=null && out.isEmpty()){
			out=Field;
		}else{
			out=out+"\t"+Field;
		}
	}
	}
	catch(NullPointerException n){}
	return out;
}
public static ArrayList<File> listFilesForFolder(String path,String format) {
	final File folder = new File(path);
	ArrayList<File> files=new ArrayList<File>();
	for (final File fileEntry : folder.listFiles()) {
		if (fileEntry.isDirectory()) {
			if (fileEntry.listFiles()!=null)
				listFilesForFolder(fileEntry.getName()+fileEntry.getPath(),format);
	    }else if(fileEntry.getName().endsWith("."+format)){
	    	files.add(fileEntry);
	        }
	    }
	return files;
	}
public static void PrintFolderContent(String path){
	final File folder = new File(path);
	for (final File fileEntry : folder.listFiles()) {
		if (fileEntry.isDirectory()) {
			if (fileEntry.listFiles()!=null)
				PrintFolderContent(fileEntry.getPath()+fileEntry.getName());
	    }else {
	    	System.out.println(fileEntry.getPath()+fileEntry.getName());
	        }
	    }
	}
public static void DeleteFolderContent(String path){
	final File folder = new File(path);
	for (final File fileEntry : folder.listFiles()) {
		if (fileEntry.isDirectory()) {
			if (fileEntry.listFiles()!=null)
				PrintFolderContent(fileEntry.getPath()+fileEntry.getName());
	    }else {
	    	fileEntry.delete();
	        }
	    }
	}
public static void DeleteFile(String path){
	final File file=new File(path);
	file.delete();
}

}
